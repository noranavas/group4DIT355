<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\Pomodoro\src\com\teamtreehouse\pomodoro\model\Attempt.java"><package>package <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>pomodoro</name><operator>.</operator><name>model</name></name>;</package>

<class><specifier>public</specifier> class <name>Attempt</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>AttemptKind</name></type> <name>kind</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>remainingSeconds</name></decl>;</decl_stmt>

    <comment type="line">// ===== Constructors(s) =====</comment>
    <constructor><specifier>public</specifier> <name>Attempt</name><parameter_list>(<parameter><decl><type><name>AttemptKind</name></type> <name>kind</name></decl></parameter> , <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>kind</name></name> <operator>=</operator> <name>kind</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remainingSeconds</name></name> <operator>=</operator> <call><name><name>kind</name><operator>.</operator><name>getTotalSeconds</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// ===== Getters =====</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{<return>return <expr><name>message</name></expr>;</return>}</block></function>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getRemainingSeconds</name><parameter_list>()</parameter_list> <block>{<return>return <expr><name>remainingSeconds</name></expr>;</return>}</block></function>
    <function><specifier>public</specifier> <type><name>AttemptKind</name></type> <name>getKind</name><parameter_list>()</parameter_list> <block>{<return>return <expr><name>kind</name></expr>;</return>}</block></function>

    <comment type="line">// ===== Setters =====</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setMessage</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>}</block></function>

    <comment type="line">// ===== Public Functions =====</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>tick</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><name><name>this</name><operator>.</operator><name>remainingSeconds</name></name><operator>--</operator></expr>;</expr_stmt>}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="string">"Attempt{"</literal> <operator>+</operator>
                <literal type="string">"kind="</literal> <operator>+</operator> <name>kind</name> <operator>+</operator>
                <literal type="string">", message='"</literal> <operator>+</operator> <name>message</name> <operator>+</operator> <literal type="char">'\''</literal> <operator>+</operator>
                <literal type="string">", remainingSeconds="</literal> <operator>+</operator> <name>remainingSeconds</name> <operator>+</operator>
                <literal type="char">'}'</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Saving "</literal> <operator>+</operator> <name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ===== Private Functions =====</comment>
}</block></class></unit>
