<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\Karaoke\src\com\teamtreehouse\KaraokeMachine.java"><package>package <name><name>com</name><operator>.</operator><name>teamtreehouse</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>model</name><operator>.</operator><name>Song</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>model</name><operator>.</operator><name>SongBook</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>model</name><operator>.</operator><name>SongRequest</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>


<class><specifier>public</specifier> class <name>KaraokeMachine</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>SongBook</name></type> <name>mSongBook</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>BufferedReader</name></type> <name>mReader</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Queue</name><argument_list type="generic">&lt;<argument><name>SongRequest</name></argument>&gt;</argument_list></name></type> <name>mSongRequestQueue</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>mMenu</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>KaraokeMachine</name><parameter_list>(<parameter><decl><type><name>SongBook</name></type> <name>songBook</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mSongBook</name> <operator>=</operator> <name>songBook</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mReader</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name><name>System</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSongRequestQueue</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayDeque</name><argument_list type="generic">&lt;<argument><name>SongRequest</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mMenu</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMenu</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"add"</literal></expr></argument>, <argument><expr><literal type="string">"Add a new song to the song book"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMenu</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"play"</literal></expr></argument>, <argument><expr><literal type="string">"Play next song in the queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMenu</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"choose"</literal></expr></argument>, <argument><expr><literal type="string">"Choose a song to sing!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mMenu</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>, <argument><expr><literal type="string">"Give up.  Exit the program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>promptAction</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"There are %d songs available and %d in the queue.  Your options are: %n"</literal></expr></argument>,
                <argument><expr><call><name><name>mSongBook</name><operator>.</operator><name>getSongCount</name></name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name><name>mSongRequestQueue</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>option</name> <range>: <expr><call><name><name>mMenu</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%s - %s %n"</literal></expr></argument>,
                    <argument><expr><call><name><name>option</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>option</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"What do you want to do:  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>choice</name> <init>= <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>choice</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>choice</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <do>do <block>{
            <try>try <block>{
                <expr_stmt><expr><name>choice</name> <operator>=</operator> <call><name>promptAction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <switch>switch <condition>(<expr><name>choice</name></expr>)</condition> <block>{
                    <case>case <expr><literal type="string">"add"</literal></expr>:</case>
                        <decl_stmt><decl><type><name>Song</name></type> <name>song</name> <init>= <expr><call><name>promptNewSong</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>mSongBook</name><operator>.</operator><name>addSong</name></name><argument_list>(<argument><expr><name>song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%s added!  %n%n"</literal></expr></argument>, <argument><expr><name>song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="string">"choose"</literal></expr>:</case>
                        <decl_stmt><decl><type><name>String</name></type> <name>singerName</name> <init>= <expr><call><name>promptForSingerName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name></type> <name>artist</name> <init>= <expr><call><name>promptArtist</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>Song</name></type> <name>artistSong</name> <init>= <expr><call><name>promptSongForArtist</name><argument_list>(<argument><expr><name>artist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>SongRequest</name></type> <name>songRequest</name> <init>= <expr><operator>new</operator> <call><name>SongRequest</name><argument_list>(<argument><expr><name>singerName</name></expr></argument>, <argument><expr><name>artistSong</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><call><name><name>mSongRequestQueue</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>songRequest</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"\n\nWhoops "</literal> <operator>+</operator> <name>singerName</name> <operator>+</operator> <literal type="string">" already requested "</literal> <operator>+</operator> <name>artistSong</name> <operator>+</operator> <literal type="string">"!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                        <expr_stmt><expr><call><name><name>mSongRequestQueue</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SongRequest</name><argument_list>(<argument><expr><name>singerName</name></expr></argument>, <argument><expr><name>artistSong</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"You chose:  %s %n"</literal></expr></argument>, <argument><expr><name>artistSong</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="string">"play"</literal></expr>:</case>
                        <expr_stmt><expr><call><name>playNext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="string">"quit"</literal></expr>:</case>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Thanks for playing!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"Unknown choice:  '%s'. Try again.  %n%n%n"</literal></expr></argument>,
                                <argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></switch>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Problem with input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ioe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block> while <condition>(<expr><operator>!</operator><call><name><name>choice</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><literal type="string">"quit"</literal></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>promptForSingerName</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Please enter the singer's name: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Song</name></type> <name>promptNewSong</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Enter the artist's name:  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>artist</name> <init>= <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Enter the title:  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Enter the video URL:  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>videoUrl</name> <init>= <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>new</operator> <call><name>Song</name><argument_list>(<argument><expr><name>artist</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>videoUrl</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>promptArtist</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Available artists:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>artists</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mSongBook</name><operator>.</operator><name>getArtists</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>promptForIndex</name><argument_list>(<argument><expr><name>artists</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>artists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Song</name></type> <name>promptSongForArtist</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>artist</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></type> <name>songs</name> <init>= <expr><call><name><name>mSongBook</name><operator>.</operator><name>getSongsForArtist</name></name><argument_list>(<argument><expr><name>artist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>songTitles</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Song</name></type> <name>song</name> <range>: <expr><name>songs</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>songTitles</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>song</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"Available songs for %s: %n"</literal></expr></argument>, <argument><expr><name>artist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>promptForIndex</name><argument_list>(<argument><expr><name>songTitles</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>songs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>promptForIndex</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>options</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>counter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>option</name> <range>: <expr><name>options</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%d.)  %s %n"</literal></expr></argument>, <argument><expr><name>counter</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Your choice:   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>optionAsString</name> <init>= <expr><call><name><name>mReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>choice</name> <init>= <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name><name>optionAsString</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>choice</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>playNext</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>SongRequest</name></type> <name>songRequest</name> <init>= <expr><call><name><name>mSongRequestQueue</name><operator>.</operator><name>poll</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>songRequest</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Sorry there are no songs in the queue."</literal> <operator>+</operator>
                    <literal type="string">"  Use choose from the menu to add some"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Song</name></type> <name>song</name> <init>= <expr><call><name><name>songRequest</name><operator>.</operator><name>getSong</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%n%n%n Ready %s? Open %s to hear %s by %s %n%n%n"</literal></expr></argument>,
                    <argument><expr><call><name><name>song</name><operator>.</operator><name>getVideoUrl</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>song</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>song</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>


}</block></class>

</unit>
