<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="C:\Users\Fabian\OneDrive\Projects\Fabian\group4DIT355\source-code-modeler\resources\code_samples\3calibration.cpp"><comment type="block">/*
 * 3calibration.cpp -- Calibrate 3 cameras in a horizontal line together.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencv2/calib3d.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencv2/imgproc.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencv2/imgcodecs.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencv2/highgui.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opencv2/core/utility.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>cv</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<enum>enum <block>{ <decl><name>DETECTION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>CAPTURING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><name>CALIBRATED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block>;</enum>

<function><specifier>static</specifier> <type><name>void</name></type> <name>help</name><parameter_list>()</parameter_list>
<block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"\nThis is a camera calibration sample that calibrates 3 horizontally placed cameras together.\n"</literal>
               <literal type="string">"Usage: 3calibration\n"</literal>
               <literal type="string">"     -w=&lt;board_width&gt;         # the number of inner corners per one of board dimension\n"</literal>
               <literal type="string">"     -h=&lt;board_height&gt;        # the number of inner corners per another board dimension\n"</literal>
               <literal type="string">"     [-s=&lt;squareSize&gt;]       # square size in some user-defined units (1 by default)\n"</literal>
               <literal type="string">"     [-o=&lt;out_camera_params&gt;] # the output filename for intrinsic [and extrinsic] parameters\n"</literal>
               <literal type="string">"     [-zt]                    # assume zero tangential distortion\n"</literal>
               <literal type="string">"     [-a=&lt;aspectRatio&gt;]      # fix aspect ratio (fx/fy)\n"</literal>
               <literal type="string">"     [-p]                     # fix the principal point at the center\n"</literal>
               <literal type="string">"     [input_data]             # input data - text file with a list of the images of the board\n"</literal>
               <literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><specifier>static</specifier> <type><name>void</name></type> <name>calcChessboardCorners</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>boardSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>squareSize</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point3f</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>corners</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>corners</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>boardSize</name><operator>.</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>boardSize</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>corners</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Point3f</name><argument_list>(<argument><expr><call><name>float</name><argument_list>(<argument><expr><name>j</name><operator>*</operator><name>squareSize</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>float</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>squareSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
}</block></function>

<function><specifier>static</specifier> <type><name>bool</name></type> <name>run3Calibration</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>imagePoints1</name></decl></parameter>,
                            <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>imagePoints2</name></decl></parameter>,
                            <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>imagePoints3</name></decl></parameter>,
                            <parameter><decl><type><name>Size</name></type> <name>imageSize</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>boardSize</name></decl></parameter>,
                            <parameter><decl><type><name>float</name></type> <name>squareSize</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>aspectRatio</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
                            <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>cameraMatrix1</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>distCoeffs1</name></decl></parameter>,
                            <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>cameraMatrix2</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>distCoeffs2</name></decl></parameter>,
                            <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>cameraMatrix3</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>distCoeffs3</name></decl></parameter>,
                            <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>R12</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>T12</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>R13</name></decl></parameter>, <parameter><decl><type><name>Mat</name><modifier>&amp;</modifier></type> <name>T13</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <comment type="line">// step 1: calibrate each camera individually</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point3f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>objpt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>imgpt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>calcChessboardCorners</name><argument_list>(<argument><expr><name>boardSize</name></expr></argument>, <argument><expr><name>squareSize</name></expr></argument>, <argument><expr><name><name>objpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Mat</name></expr></argument>&gt;</argument_list></name></type> <name>rvecs</name></decl>, <decl><type ref="prev"/><name>tvecs</name></decl>;</decl_stmt>

    <for>for<control>( <init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>imgpt0</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>imagePoints1</name></expr> </then><else>: <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>imagePoints2</name></expr> </then><else>: <expr><name>imagePoints3</name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imgpt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>imgpt0</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
            <block type="pseudo"><if>if<condition>( <expr><operator>!</operator><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr> )</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>imgpt</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>N</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></block></for>

        <if>if<condition>( <expr><call><name><name>imgpt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: not enough views for camera %d\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>objpt</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>imgpt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>objpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Mat</name></type> <name>cameraMatrix</name> <init>= <expr><call><name><name>Mat</name><operator>::</operator><name>eye</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>CV_64F</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>CALIB_FIX_ASPECT_RATIO</name></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>cameraMatrix</name><operator>.</operator><name><name>at</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>aspectRatio</name></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><name>Mat</name></type> <name>distCoeffs</name> <init>= <expr><call><name><name>Mat</name><operator>::</operator><name>zeros</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>CV_64F</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>double</name></type> <name>err</name> <init>= <expr><call><name>calibrateCamera</name><argument_list>(<argument><expr><name>objpt</name></expr></argument>, <argument><expr><name>imgpt</name></expr></argument>, <argument><expr><name>imageSize</name></expr></argument>, <argument><expr><name>cameraMatrix</name></expr></argument>,
                        <argument><expr><name>distCoeffs</name></expr></argument>, <argument><expr><name>rvecs</name></expr></argument>, <argument><expr><name>tvecs</name></expr></argument>,
                        <argument><expr><name>flags</name><operator>|</operator><name>CALIB_FIX_K3</name></expr></argument><comment type="block">/*|CALIB_FIX_K4|CALIB_FIX_K5|CALIB_FIX_K6*/</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><call><name>checkRange</name><argument_list>(<argument><expr><name>cameraMatrix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>checkRange</name><argument_list>(<argument><expr><name>distCoeffs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: camera %d was not calibrated\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Camera %d calibration reprojection error = %g\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>err</name><operator>/</operator><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cameraMatrix1</name> <operator>=</operator> <name>cameraMatrix</name></expr><operator>,</operator> <expr><name>distCoeffs1</name> <operator>=</operator> <name>distCoeffs</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cameraMatrix2</name> <operator>=</operator> <name>cameraMatrix</name></expr><operator>,</operator> <expr><name>distCoeffs2</name> <operator>=</operator> <name>distCoeffs</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cameraMatrix3</name> <operator>=</operator> <name>cameraMatrix</name></expr><operator>,</operator> <expr><name>distCoeffs3</name> <operator>=</operator> <name>distCoeffs</name></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>imgpt_right</name></decl>;</decl_stmt>

    <comment type="line">// step 2: calibrate (1,2) and (3,2) pairs</comment>
    <for>for<control>( <init><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>imgpt0</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>imagePoints2</name></expr> </then><else>: <expr><name>imagePoints3</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>imgpt</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>imgpt_right</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>imagePoints1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>imgpt0</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
            <block type="pseudo"><if>if<condition>( <expr><operator>!</operator><call><name><name>imagePoints1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr> )</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>imgpt</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>imagePoints1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>imgpt_right</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>N</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>imgpt0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></block></for>

        <if>if<condition>( <expr><call><name><name>imgpt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: not enough shared views for cameras 1 and %d\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>objpt</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>imgpt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>objpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Mat</name></type> <name>cameraMatrix</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>cameraMatrix2</name></expr> </then><else>: <expr><name>cameraMatrix3</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mat</name></type> <name>distCoeffs</name> <init>= <expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>distCoeffs2</name></expr> </then><else>: <expr><name>distCoeffs3</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Mat</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>T</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>err</name> <init>= <expr><call><name>stereoCalibrate</name><argument_list>(<argument><expr><name>objpt</name></expr></argument>, <argument><expr><name>imgpt</name></expr></argument>, <argument><expr><name>imgpt_right</name></expr></argument>, <argument><expr><name>cameraMatrix1</name></expr></argument>, <argument><expr><name>distCoeffs1</name></expr></argument>,
                                     <argument><expr><name>cameraMatrix</name></expr></argument>, <argument><expr><name>distCoeffs</name></expr></argument>,
                                     <argument><expr><name>imageSize</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>E</name></expr></argument>, <argument><expr><name>F</name></expr></argument>,
                                     <argument><expr><name>CALIB_FIX_INTRINSIC</name></expr></argument>,
                                     <argument><expr><call><name>TermCriteria</name><argument_list>(<argument><expr><name><name>TermCriteria</name><operator>::</operator><name>COUNT</name></name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pair (1,%d) calibration reprojection error = %g\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>err</name><operator>/</operator><operator>(</operator><name>N</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>cameraMatrix2</name> <operator>=</operator> <name>cameraMatrix</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>distCoeffs2</name> <operator>=</operator> <name>distCoeffs</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>R12</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>T12</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>R13</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> <expr_stmt><expr><name>T13</name> <operator>=</operator> <name>T</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><specifier>static</specifier> <type><name>bool</name></type> <name>readStringList</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>filename</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>l</name></decl></parameter> )</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>FileStorage</name></type> <name>fs</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>FileStorage</name><operator>::</operator><name>READ</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>( <expr><operator>!</operator><call><name><name>fs</name><operator>.</operator><name>isOpened</name></name><argument_list>()</argument_list></call></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>FileNode</name></type> <name>n</name> <init>= <expr><call><name><name>fs</name><operator>.</operator><name>getFirstTopLevelNode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name><name>n</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>FileNode</name><operator>::</operator><name>SEQ</name></name></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>FileNodeIterator</name></type> <name>it</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>it_end</name> <init>= <expr><call><name><name>n</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name>it_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>l</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>string</name><operator>)</operator><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter> )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Size</name></type> <name>boardSize</name></decl>, <decl><type ref="prev"/><name>imageSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>squareSize</name></decl>, <decl><type ref="prev"/><name>aspectRatio</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>outputFilename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>inputFilename</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>imgpt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>imageList</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>cv</name><operator>::</operator><name>CommandLineParser</name></name></type> <name>parser</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
        <argument><expr><literal type="string">"{help ||}{w||}{h||}{s|1|}{o|out_camera_data.yml|}"</literal>
        <literal type="string">"{zt||}{a|1|}{p||}{@input||}"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>boardSize</name><operator>.</operator><name>width</name></name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>boardSize</name><operator>.</operator><name>height</name></name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>squareSize</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aspectRatio</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>float</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CALIB_FIX_ASPECT_RATIO</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"zt"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CALIB_ZERO_TANGENT_DIST</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name><name>parser</name><operator>.</operator><name>has</name></name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>CALIB_FIX_PRINCIPAL_POINT</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>outputFilename</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"o"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>inputFilename</name> <operator>=</operator> <call><name><name>parser</name><operator>.</operator><name><name>get</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="string">"@input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>parser</name><operator>.</operator><name>check</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parser</name><operator>.</operator><name>printErrors</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>boardSize</name><operator>.</operator><name>width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid board width\n"</literal></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>boardSize</name><operator>.</operator><name>height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid board height\n"</literal></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>squareSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid board square width\n"</literal></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>aspectRatio</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid aspect ratio\n"</literal></expr></argument> )</argument_list></call></expr><operator>,</operator> <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>( <expr><call><name><name>inputFilename</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator>
       <operator>!</operator><call><name>readStringList</name><argument_list>(<argument><expr><name>inputFilename</name></expr></argument>, <argument><expr><name>imageList</name></expr></argument>)</argument_list></call> <operator>||</operator>
       <call><name><name>imageList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>imageList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error: the input image list is not specified, or can not be read, or the number of files is not divisible by 3\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>Mat</name></type> <name>view</name></decl>, <decl><type ref="prev"/><name>viewGray</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Mat</name></type> <name><name>cameraMatrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>distCoeffs</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>R</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>P</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>R12</name></decl>, <decl><type ref="prev"/><name>T12</name></decl>;</decl_stmt>
    <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <expr_stmt><expr><name><name>cameraMatrix</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name><name>Mat_</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>eye</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cameraMatrix</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>at</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <name>aspectRatio</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cameraMatrix</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name><name>at</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distCoeffs</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name><name><name>Mat_</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>zeros</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>Mat</name></type> <name>R13</name><init>=<expr><call><name><name><name>Mat_</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>eye</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>T13</name><init>=<expr><call><name><name><name>Mat_</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>zeros</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>FileStorage</name></type> <name>fs</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>namedWindow</name><argument_list>( <argument><expr><literal type="string">"Image View"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name><name>imgpt</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><call><name><name>imageList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>imageList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>k</name></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name>imread</name><argument_list>(<argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if<condition>(<expr><operator>!</operator><call><name><name>view</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point2f</name></expr></argument>&gt;</argument_list></name></type> <name>ptvec</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>imageSize</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>cvtColor</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>viewGray</name></expr></argument>, <argument><expr><name>COLOR_BGR2GRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>findChessboardCorners</name><argument_list>( <argument><expr><name>view</name></expr></argument>, <argument><expr><name>boardSize</name></expr></argument>, <argument><expr><name>ptvec</name></expr></argument>, <argument><expr><name>CALIB_CB_ADAPTIVE_THRESH</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>drawChessboardCorners</name><argument_list>( <argument><expr><name>view</name></expr></argument>, <argument><expr><name>boardSize</name></expr></argument>, <argument><expr><call><name>Mat</name><argument_list>(<argument><expr><name>ptvec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>found</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>( <expr><name>found</name></expr> )</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>imgpt</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><call><name><name>ptvec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>ptvec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ptvec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>imgpt</name><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <comment type="line">//imshow("view", view);</comment>
                <comment type="line">//int c = waitKey(0) &amp; 255;</comment>
                <comment type="line">//if( c == 27 || c == 'q' || c == 'Q' )</comment>
                <comment type="line">//    return -1;</comment>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Running calibration ...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>run3Calibration</name><argument_list>(<argument><expr><name><name>imgpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>imgpt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>imgpt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>imageSize</name></expr></argument>,
                    <argument><expr><name>boardSize</name></expr></argument>, <argument><expr><name>squareSize</name></expr></argument>, <argument><expr><name>aspectRatio</name></expr></argument>, <argument><expr><name>flags</name><operator>|</operator><name>CALIB_FIX_K4</name><operator>|</operator><name>CALIB_FIX_K5</name></expr></argument>,
                    <argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
                    <argument><expr><name>R12</name></expr></argument>, <argument><expr><name>T12</name></expr></argument>, <argument><expr><name>R13</name></expr></argument>, <argument><expr><name>T13</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>outputFilename</name></expr></argument>, <argument><expr><name><name>FileStorage</name><operator>::</operator><name>WRITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"cameraMatrix1"</literal> <operator>&lt;&lt;</operator> <name><name>cameraMatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"cameraMatrix2"</literal> <operator>&lt;&lt;</operator> <name><name>cameraMatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"cameraMatrix3"</literal> <operator>&lt;&lt;</operator> <name><name>cameraMatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"distCoeffs1"</literal> <operator>&lt;&lt;</operator> <name><name>distCoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"distCoeffs2"</literal> <operator>&lt;&lt;</operator> <name><name>distCoeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"distCoeffs3"</literal> <operator>&lt;&lt;</operator> <name><name>distCoeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"R12"</literal> <operator>&lt;&lt;</operator> <name>R12</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"T12"</literal> <operator>&lt;&lt;</operator> <name>T12</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"R13"</literal> <operator>&lt;&lt;</operator> <name>R13</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"T13"</literal> <operator>&lt;&lt;</operator> <name>T13</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"imageWidth"</literal> <operator>&lt;&lt;</operator> <name><name>imageSize</name><operator>.</operator><name>width</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"imageHeight"</literal> <operator>&lt;&lt;</operator> <name><name>imageSize</name><operator>.</operator><name>height</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Mat</name></type> <name>Q</name></decl>;</decl_stmt>

    <comment type="line">// step 3: find rectification transforms</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>ratio</name> <init>= <expr><call><name>rectify3Collinear</name><argument_list>(<argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
             <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cameraMatrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
             <argument><expr><name><name>imgpt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>imgpt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
             <argument><expr><name>imageSize</name></expr></argument>, <argument><expr><name>R12</name></expr></argument>, <argument><expr><name>T12</name></expr></argument>, <argument><expr><name>R13</name></expr></argument>, <argument><expr><name>T13</name></expr></argument>,
             <argument><expr><name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>P</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument>,
             <argument><expr><name>imageSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>CALIB_ZERO_DISPARITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Mat</name></type> <name><name>map1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>map2</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"R1"</literal> <operator>&lt;&lt;</operator> <name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"R2"</literal> <operator>&lt;&lt;</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"R3"</literal> <operator>&lt;&lt;</operator> <name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"P1"</literal> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"P2"</literal> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"P3"</literal> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>fs</name> <operator>&lt;&lt;</operator> <literal type="string">"disparityRatio"</literal> <operator>&lt;&lt;</operator> <name>ratio</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fs</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Disparity ratio = %g\n"</literal></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><call><name>initUndistortRectifyMap</name><argument_list>(<argument><expr><name><name>cameraMatrix</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>distCoeffs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>R</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>P</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>imageSize</name></expr></argument>, <argument><expr><name>CV_16SC2</name></expr></argument>, <argument><expr><name><name>map1</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>map2</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>Mat</name></type> <name>canvas</name><argument_list>(<argument><expr><name><name>imageSize</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>imageSize</name><operator>.</operator><name>width</name></name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>CV_8UC3</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>small_canvas</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>destroyWindow</name><argument_list>(<argument><expr><literal type="string">"view"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>canvas</name> <operator>=</operator> <call><name><name>Scalar</name><operator>::</operator><name>all</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>imageList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <expr_stmt><expr><name>canvas</name> <operator>=</operator> <call><name><name>Scalar</name><operator>::</operator><name>all</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k1</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>k2</name> <init>= <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>view</name> <operator>=</operator> <call><name>imread</name><argument_list>(<argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if<condition>(<expr><call><name><name>view</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>

            <decl_stmt><decl><type><name>Mat</name></type> <name>rview</name> <init>= <expr><call><name><name>canvas</name><operator>.</operator><name>colRange</name></name><argument_list>(<argument><expr><name>k2</name><operator>*</operator><name><name>imageSize</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><operator>(</operator><name>k2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>imageSize</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>remap</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>rview</name></expr></argument>, <argument><expr><name><name>map1</name><index>[<expr><name>k1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>map2</name><index>[<expr><name>k1</name></expr>]</index></name></expr></argument>, <argument><expr><name>INTER_LINEAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s %s\n"</literal></expr></argument>, <argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>imageList</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>resize</name><argument_list>( <argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>small_canvas</name></expr></argument>, <argument><expr><call><name>Size</name><argument_list>(<argument><expr><literal type="number">1500</literal></expr></argument>, <argument><expr><literal type="number">1500</literal><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INTER_LINEAR_EXACT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>small_canvas</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr> )</control>
            <block type="pseudo"><expr_stmt><expr><call><name>line</name><argument_list>(<argument><expr><name>small_canvas</name></expr></argument>, <argument><expr><call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Point</name><argument_list>(<argument><expr><name><name>small_canvas</name><operator>.</operator><name>cols</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Scalar</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">255</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>imshow</name><argument_list>(<argument><expr><literal type="string">"rectified"</literal></expr></argument>, <argument><expr><name>small_canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>waitKey</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">27</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'q'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'Q'</literal></expr> )</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
