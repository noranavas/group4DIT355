<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\gusnu\Desktop\group4DIT355\source-code-modeler\src\sourcecodemodeler\controller\SourceCodeConverter.java"><package>package <name><name>sourcecodemodeler</name><operator>.</operator><name>controller</name></name>;</package>

<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>Globals</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NoSuchElementException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Optional</name></name>;</import>

<comment type="block">/*
    This class uses srcML to convert code files to XML documents.
 */</comment>
<class><specifier>public</specifier> class <name>SourceCodeConverter</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PATH_TO_SRCML</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\\source-code-modeler\\resources\\srcML-Win\\bin\\srcml.exe"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PATH_TO_XML_DIRECTORY</name> <init>= <expr><name><name>Globals</name><operator>.</operator><name>PATH_TO_XML_DIRECTORY</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">//===== Constructor(s) =====//</comment>
    <constructor><specifier>public</specifier> <name>SourceCodeConverter</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="line">//===== Methods =====//</comment>
    <comment type="line">// Converts a selected file to a XML document in the resources/converted_xml folder.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>convertToXML</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filePath</name></decl></parameter>)</parameter_list> <block>{
        <comment type="block">/*
         Creates a process builder that contains the command prompt script
         that calls srcML to convert a code file to a XML document.
          */</comment>
        <decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>pb</name> <init>= <expr><operator>new</operator> <call><name>ProcessBuilder</name><argument_list>(
                <argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>,
                <argument><expr><literal type="string">"/c"</literal></expr></argument>,
                <argument><expr><name>PATH_TO_SRCML</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>filePath</name> <operator>+</operator> <literal type="string">" -o "</literal> <operator>+</operator> <name>PATH_TO_XML_DIRECTORY</name> <operator>+</operator> <name>fileName</name> <operator>+</operator> <literal type="string">".xml"</literal></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pb</name><operator>.</operator><name>redirectErrorStream</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Some kind of error handler for streams.</comment>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>pb</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// Run the script.</comment>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>ioe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <comment type="line">// Converts all found files in a directory to XML documents.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>convertDirectoryToXML</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>directoryPath</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// Create a file array for all files in the selected directory.</comment>
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>directoryPath</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Iterate through all the files and convert files with supported file extension to XML.</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

            <comment type="line">// If the file is a directory, call this method recursively.</comment>
            <if>if <condition>(<expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>isDirectory</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>convertDirectoryToXML</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// Get string value of 'Optional' object.</comment>
                <decl_stmt><decl><type><name>String</name></type> <name>filter</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

                <comment type="line">// This try-catch is to prevent files without extensions from throwing an exception.</comment>
                <try>try <block>{
                    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>getFileExtension</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchElementException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">//System.out.println("Unspecified extension found for file: " + files[i].getName() + " at: " + files[i].getPath());</comment>
                }</block></catch></try>

                <if>if <condition>(<expr><call><name><name>filter</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><literal type="string">"java"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>convertToXML</name><argument_list>(<argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></for>

    }</block></function>

    <comment type="line">// Get file extension by String Handling: https://www.baeldung.com/java-file-extension</comment>
    <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFileExtension</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>ofNullable</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>f</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>f</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>f</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>filename</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// Clears the output directory to prevent files from previous conversions to be included in the current process.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>clearOutputDirectory</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>PATH_TO_XML_DIRECTORY</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>files</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

}</block></class></unit>
