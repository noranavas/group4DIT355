<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\Karaoke\src\com\teamtreehouse\model\SongBook.java"><package>package <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>SongBook</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></type> <name>mSongs</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SongBook</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>mSongs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>exportTo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;
                <expr><name>PrintWriter</name> <name>writer</name> <operator>=</operator> <operator>new</operator> <call><name>PrintWriter</name><argument_list>(<argument><expr><name>fos</name></expr></argument>)</argument_list></call></expr>;
        <expr/>)</init> <block>{
            <for>for <control>(<init><decl><type><name>Song</name></type> <name>song</name> <range>: <expr><name>mSongs</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>writer</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"%s|%s|%s%n"</literal></expr></argument>,
                        <argument><expr><call><name><name>song</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>song</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><call><name><name>song</name><operator>.</operator><name>getVideoUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></for>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"Problem saving %s %n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ioe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>importFrom</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
        <try>try <init>(
                <decl><type><name>FileInputStream</name></type> <name>fis</name> <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;
                <expr><name>BufferedReader</name> <name>reader</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><name>fis</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
        <expr/>)</init> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><call><name><name>line</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\|"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>addSong</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Song</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>printf</name></name><argument_list>(<argument><expr><literal type="string">"Problems loading %s %n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ioe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addSong</name><parameter_list>(<parameter><decl><type><name>Song</name></type> <name>song</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mSongs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSongCount</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mSongs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">// FIXME:  This should be cached!</comment>
    <function><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>byArtist</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>byArtist</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Song</name></type> <name>song</name> <range>: <expr><name>mSongs</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></type> <name>artistSongs</name> <init>= <expr><call><name><name>byArtist</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>song</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>artistSongs</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>artistSongs</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>byArtist</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>song</name><operator>.</operator><name>getArtist</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>artistSongs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>artistSongs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>song</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name>byArtist</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getArtists</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>byArtist</name><argument_list>()</argument_list></call><operator>.</operator><call><name>keySet</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></type> <name>getSongsForArtist</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>artistName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></type> <name>songs</name> <init>= <expr><call><name>byArtist</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>artistName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>songs</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Song</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Song</name></type> <name>song1</name></decl></parameter>, <parameter><decl><type><name>Song</name></type> <name>song2</name></decl></parameter>)</parameter_list> <block>{
                <if>if <condition>(<expr><call><name><name>song1</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>song2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
                <return>return <expr><call><name><name>song1</name><operator>.</operator><name>mTitle</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>song2</name><operator>.</operator><name>mTitle</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>songs</name></expr>;</return>
    }</block></function>

}</block></class></unit>
