<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\Pomodoro\src\com\teamtreehouse\pomodoro\controllers\Home.java"><package>package <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>pomodoro</name><operator>.</operator><name>controllers</name></name>;</package>
<import>import <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>pomodoro</name><operator>.</operator><name>model</name><operator>.</operator><name>Attempt</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>teamtreehouse</name><operator>.</operator><name>pomodoro</name><operator>.</operator><name>model</name><operator>.</operator><name>AttemptKind</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>KeyFrame</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>animation</name><operator>.</operator><name>Timeline</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>property</name><operator>.</operator><name>SimpleStringProperty</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>property</name><operator>.</operator><name>StringProperty</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>fxml</name><operator>.</operator><name>FXML</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>control</name><operator>.</operator><name>TextArea</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>layout</name><operator>.</operator><name>VBox</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioClip</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>util</name><operator>.</operator><name>Duration</name></name>;</import>

<class><specifier>public</specifier> class <name>Home</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AudioClip</name></type> <name>WW_MainMenu_Start</name></decl>, <decl><type ref="prev"/><name>WW_PauseMenu_Quit</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name>VBox</name></type> <name>container</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name>Label</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>FXML</name></annotation> <specifier>private</specifier> <type><name>TextArea</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Attempt</name></type> <name>currentAttempt</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>StringProperty</name></type> <name>timerText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Timeline</name></type> <name>timeline</name></decl>;</decl_stmt>

    <comment type="line">// ===== Constructor(s) =====</comment>
    <constructor><specifier>public</specifier> <name>Home</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>timerText</name> <operator>=</operator> <operator>new</operator> <call><name>SimpleStringProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTimerText</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>WW_MainMenu_Start</name> <operator>=</operator> <operator>new</operator> <call><name>AudioClip</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"/sounds/WW_MainMenu_Start.mp3"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>WW_PauseMenu_Quit</name> <operator>=</operator> <operator>new</operator> <call><name>AudioClip</name><argument_list>(<argument><expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResource</name><argument_list>(<argument><expr><literal type="string">"/sounds/WW_PauseMenu_Quit.mp3"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toExternalForm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">// ===== Getters =====</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTimerText</name><parameter_list>()</parameter_list> <block>{<return>return <expr><call><name><name>timerText</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
    <function><specifier>public</specifier> <type><name>StringProperty</name></type> <name>timerTextProperty</name><parameter_list>()</parameter_list> <block>{<return>return <expr><name>timerText</name></expr>;</return>}</block></function>

    <comment type="line">// ===== Setters =====</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTimerText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>timerText</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>timerText</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>timerText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTimerText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>remainingSeconds</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>minutes</name> <init>= <expr><name>remainingSeconds</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><name>remainingSeconds</name> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setTimerText</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>minutes</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">":"</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%02d"</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ===== Public Functions =====</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>playTimer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>getStyleClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><literal type="string">"playing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>pauseTimer</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>getStyleClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><literal type="string">"playing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>pause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>handlePause</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>pauseTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>handlePlay</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>currentAttempt</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>handleRestart</name><argument_list>(<argument><expr><name>actionEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>playTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>handleRestart</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>prepareAttempt</name><argument_list>(<argument><expr><name><name>AttemptKind</name><operator>.</operator><name>FOCUS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>playTimer</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// ===== Private Functions =====</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>prepareAttempt</name><parameter_list>(<parameter><decl><type><name>AttemptKind</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentAttempt</name> <operator>=</operator> <operator>new</operator> <call><name>Attempt</name><argument_list>(<argument><expr><name>kind</name></expr></argument>,<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addAttemptStyle</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>kind</name><operator>.</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setTimerText</name><argument_list>(<argument><expr><call><name><name>currentAttempt</name><operator>.</operator><name>getRemainingSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeline</name> <operator>=</operator> <operator>new</operator> <call><name>Timeline</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>setCycleCount</name></name><argument_list>(<argument><expr><call><name><name>kind</name><operator>.</operator><name>getTotalSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>getKeyFrames</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyFrame</name><argument_list>(<argument><expr><call><name><name>Duration</name><operator>.</operator><name>seconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>currentAttempt</name><operator>.</operator><name>tick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setTimerText</name><argument_list>(<argument><expr><call><name><name>currentAttempt</name><operator>.</operator><name>getRemainingSeconds</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>setOnFinished</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name>saveCurrentAttempt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>currentAttempt</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttemptKind</name><operator>.</operator><name>FOCUS</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>WW_MainMenu_Start</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>WW_PauseMenu_Quit</name><operator>.</operator><name>play</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><call><name>prepareAttempt</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>currentAttempt</name><operator>.</operator><name>getKind</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttemptKind</name><operator>.</operator><name>FOCUS</name></name></expr> ?</condition><then> <expr><name><name>AttemptKind</name><operator>.</operator><name>BREAK</name></name></expr> </then><else>: <expr><name><name>AttemptKind</name><operator>.</operator><name>FOCUS</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>saveCurrentAttempt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>currentAttempt</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>currentAttempt</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>clearAttemptStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>timeline</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>timeline</name><operator>.</operator><name>getStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Animation</name><operator>.</operator><name>Status</name><operator>.</operator><name>RUNNING</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>timeline</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addAttemptStyle</name><parameter_list>(<parameter><decl><type><name>AttemptKind</name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>getStyleClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><call><name><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>clearAttemptStyles</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>getStyleClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><literal type="string">"playing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>AttemptKind</name></type> <name>kind</name> <range>: <expr><call><name><name>AttemptKind</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>getStyleClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><call><name><name>kind</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
}</block></class></unit>
