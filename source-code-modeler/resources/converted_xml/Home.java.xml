<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\salva_threads\view\Home.java"><package>package <name><name>sourcecodemodeler</name><operator>.</operator><name>view</name></name>;</package>

<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>property</name><operator>.</operator><name>SimpleStringProperty</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>beans</name><operator>.</operator><name>property</name><operator>.</operator><name>StringProperty</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Task</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>event</name><operator>.</operator><name>ActionEvent</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>scene</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>DirectoryChooser</name></name>;</import>
<import>import <name><name>javafx</name><operator>.</operator><name>stage</name><operator>.</operator><name>FileChooser</name></name>;</import>
<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>Globals</name></name>;</import>
<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>controller</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>network</name><operator>.</operator><name>Receiver</name></name>;</import>
<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>network</name><operator>.</operator><name>Sender</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<comment type="block">/*
    This class handles the communication between JavaFX and the rest of the system.
    For example button events.
 */</comment>
<class><specifier>public</specifier> class <name>Home</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>SourceCodeConverter</name></type> <name>sourceCodeConverter</name> <init>= <expr><operator>new</operator> <call><name>SourceCodeConverter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>XMLIterator</name></type> <name>xmlIterator</name> <init>= <expr><operator>new</operator> <call><name>XMLIterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>File</name></type> <name>selectedFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>StringProperty</name></type> <name>fileName</name></decl>;</decl_stmt>

    <comment type="line">//socket</comment>
    <decl_stmt><decl><type><name>Receiver</name></type> <name>receiver</name> <init>= <expr><operator>new</operator> <call><name>Receiver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Sender</name></type> <name>sender</name> <init>= <expr><operator>new</operator> <call><name>Sender</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//===== Constructor(s) =====//</comment>
    <constructor><specifier>public</specifier> <name>Home</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <operator>new</operator> <call><name>SimpleStringProperty</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">//===== Getters &amp; Setters =====//</comment>
    <function><specifier>public</specifier> <type><name>String</name></type> <name>getFileName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>fileName</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="line">// This method is needed to update the element in the fxml file.</comment>
    <function><specifier>public</specifier> <type><name>StringProperty</name></type> <name>fileNameProperty</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>fileName</name></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setFileName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fileName</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <comment type="line">//===== Methods =====//</comment>


    <comment type="line">// Allows the user to select a file.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>selectFile</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>FileChooser</name></type> <name>fileChooser</name> <init>= <expr><operator>new</operator> <call><name>FileChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Select a code file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Title of the JavaFX window.</comment>

        <comment type="line">// Defines selectable file extensions. In this case .java files.</comment>
        <decl_stmt><decl><type><name><name>FileChooser</name><operator>.</operator><name>ExtensionFilter</name></name></type> <name>extFilters</name> <init>= <expr><operator>new</operator> <call><name><name>FileChooser</name><operator>.</operator><name>ExtensionFilter</name></name><argument_list>(<argument><expr><literal type="string">"Code files"</literal></expr></argument>, <argument><expr><literal type="string">"*.java"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Apply filters to the file chooser.</comment>
        <expr_stmt><expr><call><name><name>fileChooser</name><operator>.</operator><name>getExtensionFilters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>extFilters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Open the JavaFX window.</comment>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator><call><name><name>actionEvent</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>selectedFile</name> <operator>=</operator> <call><name><name>fileChooser</name><operator>.</operator><name>showOpenDialog</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getScene</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update JavaFX to display name of selected file.</comment>
        <expr_stmt><expr><call><name>setFileName</name><argument_list>(<argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Allows the user to select a directory.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>selectDirectory</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DirectoryChooser</name></type> <name>directoryChooser</name> <init>= <expr><operator>new</operator> <call><name>DirectoryChooser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>directoryChooser</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"Select a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><operator>(</operator><name>Node</name><operator>)</operator><call><name><name>actionEvent</name><operator>.</operator><name>getSource</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>selectedFile</name> <operator>=</operator> <call><name><name>directoryChooser</name><operator>.</operator><name>showDialog</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getScene</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setFileName</name><argument_list>(<argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">// Calls the conversion methods from the SourceCodeConverterClass.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>convertToXML</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>sourceCodeConverter</name><operator>.</operator><name>clearOutputDirectory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>selectedFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sourceCodeConverter</name><operator>.</operator><name>convertDirectoryToXML</name></name><argument_list>(<argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>sourceCodeConverter</name><operator>.</operator><name>convertToXML</name></name><argument_list>(<argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sender</name><operator>.</operator><name>connect</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sender</name><operator>.</operator><name>send</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sender</name><operator>.</operator><name>closeSocket</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"No file or directory selected."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="line">//===== Temporary Test Methods =====//</comment>
    <comment type="line">// Prints the content of the latest converted file to the console.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printXMLContent</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>selectedFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Can not print a directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>xmlIterator</name><operator>.</operator><name>printXMLFile</name></name><argument_list>( <argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>printFormattedXML</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>actionEvent</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>selectedFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Can not print a directory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>xmlIterator</name><operator>.</operator><name>createXMLClass</name></name><argument_list>(<argument><expr><call><name><name>selectedFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">".xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

}</block></class>
</unit>
