<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\x220\Desktop\newbranch\group4DIT355\source-code-modeler\src\sourcecodemodeler\model\Sound.java"><package>package <name><name>sourcecodemodeler</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>sound</name><operator>.</operator><name>sampled</name><operator>.</operator><name>AudioInputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>sound</name><operator>.</operator><name>sampled</name><operator>.</operator><name>AudioSystem</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>sound</name><operator>.</operator><name>sampled</name><operator>.</operator><name>Clip</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>

<class><specifier>public</specifier> class <name>Sound</name> <block>{
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>play</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list>
    <block>{
        <comment type="line">// Note: use .wav files</comment>
        <expr_stmt><expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Clip</name></type> <name>clip</name> <init>= <expr><call><name><name>AudioSystem</name><operator>.</operator><name>getClip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>AudioInputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>AudioSystem</name><operator>.</operator><name>getAudioInputStream</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>clip</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>clip</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"play sound error: "</literal> <operator>+</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" for "</literal> <operator>+</operator> <name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
