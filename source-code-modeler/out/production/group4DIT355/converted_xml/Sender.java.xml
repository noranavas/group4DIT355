<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\salva_threads\network\Sender.java"><package>package <name><name>sourcecodemodeler</name><operator>.</operator><name>network</name></name>;</package>

<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>Globals</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipInputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>Sender</name> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>outDir</name> <init>= <expr><literal type="string">"C:\\Users\\x220\\IdeaProjects\\testServer\\resources"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>readDir</name> <init>= <expr><name><name>Globals</name><operator>.</operator><name>PATH_TO_XML_FILES</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Socket</name></type> <name>socket</name><init>=<expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> <comment type="line">//create the socket</comment>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>connect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connecting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>socket</name> <operator>=</operator> <operator>new</operator> <call><name>Socket</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>send</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>BufferedOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>BufferedOutputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>print</name></name><argument_list>(<argument><expr><literal type="string">"Read::"</literal><operator>+</operator><name>readDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>readDir</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>readZip</name><argument_list>(<argument><expr><name>bis</name></expr></argument>,<argument><expr><name>outDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>closeSocket</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>socket</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>readZip</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>socketIs</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>outPutDirectory</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>ZipInputStream</name></type> <name>zips</name> <init>= <expr><operator>new</operator> <call><name>ZipInputStream</name><argument_list>(<argument><expr><name>socketIs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>zipEntry</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>


        <while>while<condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <operator>(</operator><name>zipEntry</name> <operator>=</operator> <call><name><name>zips</name><operator>.</operator><name>getNextEntry</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>zipEntry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>outFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>outPutDirectory</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"----["</literal><operator>+</operator><call><name><name>outFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"], filesize["</literal><operator>+</operator><call><name><name>zipEntry</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if<condition>(<expr><call><name><name>zipEntry</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>File</name></type> <name>zipEntryFolder</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>zipEntry</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name><name>zipEntryFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>outFile</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <continue>continue;</continue>
            }</block></then><else>else<block>{
                <decl_stmt><decl><type><name>File</name></type> <name>parentFolder</name> <init>= <expr><call><name><name>outFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name><name>parentFolder</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name><name>parentFolder</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"ZipEntry::"</literal><operator>+</operator><call><name><name>zipEntry</name><operator>.</operator><name>getCompressedSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>outFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fileLength</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>zipEntry</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fileByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>fileLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>zips</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>

}</block></class>
</unit>
