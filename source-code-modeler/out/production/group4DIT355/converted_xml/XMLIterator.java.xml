<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\latest0\controller\XMLIterator.java"><package>package <name><name>sourcecodemodeler</name><operator>.</operator><name>controller</name></name>;</package>

<import>import <name><name>sourcecodemodeler</name><operator>.</operator><name>model</name><operator>.</operator><name>XMLClass</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>Node</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>w3c</name><operator>.</operator><name>dom</name><operator>.</operator><name>NodeList</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilder</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>DocumentBuilderFactory</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>xml</name><operator>.</operator><name>parsers</name><operator>.</operator><name>ParserConfigurationException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>

<comment type="block">/*
    This class iterates over the tags of XML documents to retrieve data (data selection).
    The data is then used to create classes that can later be displayed in the produced class diagram.
 */</comment>
<class><specifier>public</specifier> class <name>XMLIterator</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>pathToXMLDirectory</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"user.dir"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\\source-code-modeler\\resources\\converted_xml\\"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//===== Constructor(s) =====//</comment>
    <constructor><specifier>public</specifier> <name>XMLIterator</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <comment type="line">//===== Methods =====//</comment>
    <comment type="line">// This method prints the raw content of the latest converted file.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>printXMLFile</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>fileName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>pathToXMLFile</name> <init>= <expr><name>pathToXMLDirectory</name> <operator>+</operator> <name>fileName</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>pb</name> <init>= <expr><operator>new</operator> <call><name>ProcessBuilder</name><argument_list>(
                <argument><expr><literal type="string">"cmd.exe"</literal></expr></argument>,
                <argument><expr><literal type="string">"/c"</literal></expr></argument>,
                <argument><expr><literal type="string">"more "</literal> <operator>+</operator> <name>pathToXMLFile</name></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pb</name><operator>.</operator><name>redirectErrorStream</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>Process</name></type> <name>p</name> <init>= <expr><call><name><name>pb</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>br</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>line</name> <operator>=</operator> <call><name><name>br</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>line</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{ <break>break;</break> }</block></then></if>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>ioe</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <comment type="line">// Creates a class (XMLClass) that only contains the data displayed in a class of a class diagram.</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>createXMLClass</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>XMLClass</name></type> <name>xmlClass</name> <init>= <expr><operator>new</operator> <call><name>XMLClass</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>xmlClass</name><operator>.</operator><name>setName</name></name><argument_list>(<argument><expr><call><name><name>name</name>
                <operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">".xml"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">".c"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">".cpp"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">".java"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Class name: "</literal> <operator>+</operator> <call><name><name>xmlClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setAttributes</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>xmlClass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Attributes: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO: Exclude local attributes inside methods.</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>attribute</name> <range>: <expr><call><name><name>xmlClass</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>attribute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Methods: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// TODO: Filter out everything except access modifier, return type, method name and parameters.</comment>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>method</name> <range>: <expr><call><name><name>xmlClass</name><operator>.</operator><name>getMethods</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><call><name><name>method</name>
                    <operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"public"</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"private"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <comment type="line">// Iterates through the XML document to retrieve attributes.</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>setAttributes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>xmlFileName</name></decl></parameter>, <parameter><decl><type><name>XMLClass</name></type> <name>xmlClass</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DocumentBuilderFactory</name></type> <name>docBuilderFactory</name> <init>= <expr><call><name><name>DocumentBuilderFactory</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>DocumentBuilder</name></type> <name>docBuilder</name> <init>= <expr><call><name><name>docBuilderFactory</name><operator>.</operator><name>newDocumentBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Document</name></type> <name>doc</name> <init>= <expr><call><name><name>docBuilder</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>pathToXMLDirectory</name> <operator>+</operator> <name>xmlFileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>NodeList</name></type> <name>nodeList</name> <init>= <expr><call><name><name>doc</name><operator>.</operator><name>getElementsByTagName</name></name><argument_list>(<argument><expr><literal type="string">"decl_stmt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Tag for attributes.</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodeList</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodeList</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>xmlClass</name><operator>.</operator><name>addAttribute</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getTextContent</name></name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"public"</literal></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"private"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr></argument>
                    )</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <comment type="line">// Move to separate function for method retrieval.</comment>
            <expr_stmt><expr><name>nodeList</name> <operator>=</operator> <call><name><name>doc</name><operator>.</operator><name>getElementsByTagName</name></name><argument_list>(<argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Tag for methods.</comment>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>nodeList</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>Node</name></type> <name>node</name> <init>= <expr><call><name><name>nodeList</name><operator>.</operator><name>item</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>node</name><operator>.</operator><name>getNodeType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Node</name><operator>.</operator><name>ELEMENT_NODE</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>xmlClass</name><operator>.</operator><name>addMethod</name></name><argument_list>(<argument><expr><call><name><name>node</name><operator>.</operator><name>getTextContent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ParserConfigurationException</name></type> | <type><name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>SAXException</name></name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

}</block></class>
</unit>
