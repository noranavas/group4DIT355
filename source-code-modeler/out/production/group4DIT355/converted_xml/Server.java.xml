<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\salva_threads\network\Server.java"><import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ServerSocket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>Socket</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>CRC32</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipEntry</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>ZipOutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>Server</name> <super><extends>extends <name>Thread</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>ServerSocket</name></type> <name>serverSocket</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Socket</name></type> <name>socket</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>MAX_READ_SIZE</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Server</name><parameter_list>(<parameter><decl><type><name>Socket</name></type> <name>socket</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>socket</name></name> <operator>=</operator> <name>socket</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>FileNotFoundException</name></expr></argument>,
            <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><name>serverSocket</name> <operator>=</operator> <operator>new</operator> <call><name>ServerSocket</name><argument_list>(<argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Server</name></type> <name>socServer</name> <init>= <expr><operator>new</operator> <call><name>Server</name><argument_list>(
                    <argument><expr><call><name><name>serverSocket</name><operator>.</operator><name>accept</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>socServer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>

    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Connected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(
                    <argument><expr><call><name><name>socket</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytesToRead</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>MAX_READ_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>copyFolder</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Reading"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>readLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>readLength</name> <operator>=</operator> <call><name><name>bis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>bytesToRead</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>readLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Reading::"</literal><operator>+</operator><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>copyFolder</name> <operator>+=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>bos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>readLength</name> <operator>&lt;</operator> <name>MAX_READ_SIZE</name></expr>)</condition><then><block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></while>

            <decl_stmt><decl><type><name>File</name></type> <name>readFile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>copyFolder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>readFile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Reading Folder::"</literal> <operator>+</operator> <name>copyFolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>ZipOutputStream</name></type> <name>zipOpStream</name> <init>= <expr><operator>new</operator> <call><name>ZipOutputStream</name><argument_list>(
                        <argument><expr><call><name><name>socket</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sendFileOutput</name><argument_list>(<argument><expr><name>zipOpStream</name></expr></argument>, <argument><expr><name>readFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>zipOpStream</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"zipOpStream Flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"Folder to read does not exist::["</literal><operator>+</operator><call><name><name>readFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>socket</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>sendFileOutput</name><parameter_list>(<parameter><decl><type><name>ZipOutputStream</name></type> <name>zipOpStream</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>outFile</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>relativePath</name> <init>= <expr><call><name><name>outFile</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParentFile</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"relativePath["</literal> <operator>+</operator> <name>relativePath</name> <operator>+</operator> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outFile</name> <operator>=</operator> <call><name><name>outFile</name><operator>.</operator><name>getAbsoluteFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>outFile</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sendFolder</name><argument_list>(<argument><expr><name>zipOpStream</name></expr></argument>, <argument><expr><name>outFile</name></expr></argument>, <argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>sendFolder</name><argument_list>(<argument><expr><name>zipOpStream</name></expr></argument>, <argument><expr><name>outFile</name></expr></argument>, <argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>sendFolder</name><parameter_list>(<parameter><decl><type><name>ZipOutputStream</name></type> <name>zipOpStream</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>folder</name></decl></parameter>,
                           <parameter><decl><type><name>String</name></type> <name>relativePath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>filesList</name> <init>= <expr><call><name><name>folder</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>File</name></type> <name>file</name> <range>: <expr><name>filesList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>file</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>sendFolder</name><argument_list>(<argument><expr><name>zipOpStream</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>sendFile</name><argument_list>(<argument><expr><name>zipOpStream</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>sendFile</name><parameter_list>(<parameter><decl><type><name>ZipOutputStream</name></type> <name>zipOpStream</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>,
                         <parameter><decl><type><name>String</name></type> <name>relativePath</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>absolutePath</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>zipEntryFileName</name> <init>= <expr><name>absolutePath</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name><name>absolutePath</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name><name>absolutePath</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>relativePath</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>zipEntryFileName</name> <operator>=</operator> <call><name><name>absolutePath</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>relativePath</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name><name>zipEntryFileName</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>File</name><operator>.</operator><name>separator</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>zipEntryFileName</name> <operator>=</operator> <call><name><name>zipEntryFileName</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>out</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><literal type="string">"zipEntryFileName:::"</literal><operator>+</operator><call><name><name>relativePath</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="string">"::"</literal><operator>+</operator><name>zipEntryFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <throw>throw <expr><operator>new</operator> <call><name>Exception</name><argument_list>(<argument><expr><literal type="string">"Invalid Absolute Path"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>

        <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>bis</name> <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(
                <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>fileByte</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>MAX_READ_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>readBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CRC32</name></type> <name>crc</name> <init>= <expr><operator>new</operator> <call><name>CRC32</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>readBytes</name> <operator>=</operator> <call><name><name>bis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{
            <if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>readBytes</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>
            <comment type="line">//System.out.println("length::"+readBytes);</comment>
            <expr_stmt><expr><call><name><name>crc</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>readBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ZipEntry</name></type> <name>zipEntry</name> <init>= <expr><operator>new</operator> <call><name>ZipEntry</name><argument_list>(<argument><expr><name>zipEntryFileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>zipEntry</name><operator>.</operator><name>setMethod</name></name><argument_list>(<argument><expr><name><name>ZipEntry</name><operator>.</operator><name>STORED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>zipEntry</name><operator>.</operator><name>setCompressedSize</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>zipEntry</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>zipEntry</name><operator>.</operator><name>setCrc</name></name><argument_list>(<argument><expr><call><name><name>crc</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>zipOpStream</name><operator>.</operator><name>putNextEntry</name></name><argument_list>(<argument><expr><name>zipEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bis</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//System.out.println("zipEntryFileName::"+zipEntryFileName);</comment>
        <while>while <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>readBytes</name> <operator>=</operator> <call><name><name>bis</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{
            <if>if<condition>(<expr><operator>-</operator><literal type="number">1</literal> <operator>==</operator> <name>readBytes</name></expr>)</condition><then><block>{
                <break>break;</break>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>zipOpStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>fileByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>readBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>

}</block></class></unit>
