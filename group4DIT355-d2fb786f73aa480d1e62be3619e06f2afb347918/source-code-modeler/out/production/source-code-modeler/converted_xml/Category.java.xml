<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="C:\Users\Fabian\Desktop\code_samples\subdirectory_test\Category.java"><package>package <name><name>org</name><operator>.</operator><name>recipelibrary</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>javax</name><operator>.</operator><name>persistence</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>validation</name><operator>.</operator><name>constraints</name><operator>.</operator><name>NotNull</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>validation</name><operator>.</operator><name>constraints</name><operator>.</operator><name>Pattern</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>validation</name><operator>.</operator><name>constraints</name><operator>.</operator><name>Size</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><annotation>@<name>Entity</name></annotation>
<specifier>public</specifier> class <name>Category</name> <block>{
    <decl_stmt><decl><annotation>@<name>Id</name></annotation> <comment type="line">// Makes every other non-transient field marked as a column. I.e. no need to mark the rest of the fields with @Column.</comment>
    <annotation>@<name>GeneratedValue</name><argument_list>(<argument><expr><name>strategy</name> <operator>=</operator> <name><name>GenerationType</name><operator>.</operator><name>IDENTITY</name></name></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>NotNull</name></annotation>
    <annotation>@<name>Size</name><argument_list>(<argument><expr><name>min</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>max</name> <operator>=</operator> <literal type="number">25</literal></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <literal type="string">"Ergh ima da evil witch, no name such, must be 3-25 long!"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>name</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>NotNull</name></annotation>
    <annotation>@<name>Pattern</name><argument_list>(<argument><expr><name>regexp</name> <operator>=</operator> <literal type="string">"#[0-9a-fA-F]{6}"</literal></expr></argument>, <argument><expr><name>message</name> <operator>=</operator> <literal type="string">"Kha! Witch no like no color, select 1!"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>colorCode</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>OneToMany</name><argument_list>(<argument><expr><name>mappedBy</name> <operator>=</operator> <literal type="string">"category"</literal></expr></argument>)</argument_list></annotation> <comment type="line">// One category object can be associated with many recipe objects.</comment>
    <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipe</name></argument>&gt;</argument_list></name></type> <name>recipes</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">//===== Constructor(s) =====//</comment>
    <comment type="line">// Default constructor needed for h2 database to work.</comment>
    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>()</parameter_list> <block>{

    }</block></constructor>

    <comment type="line">// Only used by CategoryRepository(?).</comment>
    <constructor><specifier>public</specifier> <name>Category</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">//===== Getters &amp; Setters =====//</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>id</name></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>name</name></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getColorCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>colorCode</name></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setColorCode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>colorCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colorCode</name></name> <operator>=</operator> <name>colorCode</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipe</name></argument>&gt;</argument_list></name></type> <name>getRecipes</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>recipes</name></expr>;</return>
    }</block></function>

}</block></class></unit>
